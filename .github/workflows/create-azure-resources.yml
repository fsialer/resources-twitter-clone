name: CREATE AZURE RESOURCES

on:
  workflow_dispatch:

#permissions:
#  id-token: write

jobs:
#  deploy-azure-service-bus:
#    runs-on: ubuntu-latest
#
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Login to Azure
#        uses: azure/login@v2
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#
#      - name: Create Azure Service Bus Topic
#        run: |
#          az servicebus namespace create --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" --name "${{vars.AZURE_BUS_SERVICE}}" --location "${{vars.AZURE_LOCATION}}" --sku Standard
#          az servicebus topic create --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" --namespace-name "${{vars.AZURE_BUS_SERVICE}}" --name "${{vars.AZURE_SB_NAME_TOPIC}}"
#          az servicebus topic subscription create --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" --namespace-name "${{vars.AZURE_BUS_SERVICE}}" --topic-name "${{vars.AZURE_SB_NAME_TOPIC}}" --name "${{vars.AZURE_SB_NAME_SUBSCRIPTION}}"

  configure-key-vault:
    runs-on: ubuntu-latest
    needs: [deploy-azure-service-bus]  # Se ejecuta después de la Azure Function
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Azure Key Vault
        run: |
          az keyvault create --name "${{vars.AZURE_KEY_VAULT}}" \
          --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" \
          --enable-rbac-authorization \
          --location "${{vars.AZURE_LOCATION}}"

#      - name:  Asignar permisos en key vault
#        run: |
#          USER_OBJECT_ID=$(az ad sp show --id "${{ secrets.AZURE_CLIENT_ID }}" --query id --output tsv)
#          echo "User Object ID: $USER_OBJECT_ID"
#          az role assignment create --assignee "${{ secrets.AZURE_CLIENT_ID }}" \
#          --role "Key Vault Administrator" \
#          --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.AZURE_RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/${{ vars.AZURE_KEY_VAULT }}"





      #connection_string=$(az servicebus namespace authorization-rule keys list --resource-group ${{vars.AZURE_RESOURCE_GROUP}} --namespace-name "${{vars.AZURE_BUS_SERVICE}}" --name "RootManageSharedAccessKey"  --query "primaryConnectionString"   --output tsv)
      - name: Store Secrets in Key Vault
        run: |
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "client-id-code-authorization" --value "${{ secrets.CLIENT_ID_CODE_AUTHORIZATION }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "client-secret-code-authorization" --value "${{ secrets.CLIENT_SECRET_CODE_AUTHORIZATION }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "client-id-client-credentials" --value "${{ secrets.CLIENT_ID_CLIENT_CREDENTIALS }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "client-secret-client-credentials" --value "${{ secrets.CLIENT_SECRET_CLIENT_CREDENTIALS }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "postgres-user" --value "${{ secrets.POSTGRES_USER }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "postgres-password" --value "${{ secrets.POSTGRES_PASSWORD }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "mongo-user" --value "${{ secrets.MONGO_INITDB_ROOT_USERNAME }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "mongo-password" --value "${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "connection-send-notification" --value "$connection_string"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "key-secret" --value "${{ secrets.KEY_SECRET }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "send-grid-sender-email" --value "${{ secrets.SENDGRID_SENDER_EMAIL }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "send-grid-api-key" --value "${{ secrets.SENDGRID_API_KEY }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "smtp-sender-email" --value "${{ secrets.SMTP_SENDER_EMAIL }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "smtp-user" --value "${{ secrets.SMTP_USER }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "smtp-password" --value "${{ secrets.SMTP_PASSWORD }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "smtp-host" --value "${{ secrets.SMTP_HOST }}"
#          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "smtp-port" --value "${{ secrets.SMTP_PORT }}"

  configure-aks:
    runs-on: ubuntu-latest
    needs: configure-key-vault  # Se ejecuta después de la Azure Function
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure kubectl
        run: |
          az aks create \
          --resource-group ${{vars.AZURE_RESOURCE_GROUP}} \
          --name "${{vars.AZURE_AKS_CLUSTER}}" \
          --enable-managed-identity \
          --node-count 2 \
          --enable-addons monitoring \
          --enable-addons azure-keyvault-secrets-provider \
          --generate-ssh-keys \
          --node-vm-size Standard_D2_v2

#      - name: Give execute permissions to deploy script
#        run: chmod +x k8s/dev/deploy-dev.sh
#
#      - name: Deploy to AKS
#        run: ./k8s/dev/deploy-dev.sh  # Ejecuta el script
#
#      - name: Deploy to AKS
#        run: |
#          kubectl apply -f k8s/dev
#          kubectl rollout status deployment/gateway-dev -n development
#          kubectl get ingress -n development  # Verifica los recursos de networking



#  deploy:
#    runs-on: ubuntu-latest
#    needs: [configure-aks]
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Login to Azure
#        uses: azure/login@v2
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#
#      - name: Give execute permissions to deploy script
#        run: chmod +x k8s/dev/deploy-dev.sh
#
#      - name: Deploy to AKS
#        run: ./k8s/dev/deploy-dev.sh  # Ejecuta el script
#
#      - name: Deploy to AKS
#        run: |
#          az aks get-credentials --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" --name "${{vars.AZURE_AKS_CLUSTER}}" --overwrite-existing
#          kubectl apply -f k8s/dev
#          kubectl rollout status deployment/gateway-dev -n development
#          kubectl get ingress -n development  # Verifica los recursos de networking
