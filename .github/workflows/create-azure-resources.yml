name: CREATE AZURE RESOURCES

on:
  workflow_dispatch:

#permissions:
#  id-token: write

jobs:
  deploy-azure-service-bus:
    runs-on: ubuntu-latest


    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
#          client-id: ${{ secrets.AZURE_CLIENT_ID }}
#          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
#          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#          enable-AzPSSession: false
#          varsironment: azurecloud
#          allow-no-subscriptions: false
#          audience: api://AzureADTokenExchange
#          auth-type: SERVICE_PRINCIPAL












      - name: Create Azure Service Bus Topic
        run: |
          az servicebus namespace create --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" --name "${{vars.AZURE_BUS_SERVICE}}" --location "${{vars.AZURE_LOCATION}}" --sku Standard
          az servicebus topic create --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" --namespace-name "${{vars.AZURE_BUS_SERVICE}}" --name "${{vars.AZURE_SB_NAME_TOPIC}}"
          az servicebus topic subscription create --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" --namespace-name "${{vars.AZURE_BUS_SERVICE}}" --topic-name "${{vars.AZURE_SB_NAME_TOPIC}}" --name "${{vars.AZURE_SB_NAME_SUBSCRIPTION}}"

  configure-key-vault:
    runs-on: ubuntu-latest
    needs: [deploy-azure-service-bus]  # Se ejecuta después de la Azure Function
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Create Azure Key Vault
        run: |
          az keyvault create --name "${{vars.AZURE_KEY_VAULT}}" --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" --location "${{vars.AZURE_LOCATION}}"
      - name:  Asignar permisos en key vault
        run: |
          USER_OBJECT_ID=$(az ad sp show --id "${{ secrets.AZURE_CLIENT_ID }}" --query id --output tsv)
          echo "User Object ID: $USER_OBJECT_ID"
          az role assignment create --assignee "$USER_OBJECT_ID" \
          --role "Key Vault Secrets Officer" \
          --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.AZURE_RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/${{ vars.AZURE_KEY_VAULT }}"
##          az keyvault set-policy --name "${{vars.AZURE_KEY_VAULT}}" --spn $(az ad sp show --id $(az account show --query user.principalId --output tsv) --query appId --output tsv) --secret-permissions get list set delete

      - name: Store Secrets in Key Vault
        run: |
          echo "${{ secrets.CLIENT_ID_CODE_AUTHORIZATION }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "client_id_code_authorization" --value "${{ secrets.CLIENT_ID_CODE_AUTHORIZATION }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "client_secret_code_authorization" --value "${{ secrets.CLIENT_SECRET_CODE_AUTHORIZATION }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "client_id_client_credentials" --value "${{ secrets.CLIENT_ID_CLIENT_CREDENTIALS }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "client_secret_client_credentials" --value "${{ secrets.CLIENT_SECRET_CLIENT_CREDENTIALS }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "postgres_user" --value "${{ secrets.POSTGRES_USER }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "postgres_password" --value "${{ secrets.POSTGRES_PASSWORD }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "mongo_initdb_root_username" --value "${{ secrets.MONGO_INITDB_ROOT_USERNAME }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "mongo_initdb_root_password" --value "${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}"
          connection_string=$(az servicebus namespace show-connection-string --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" --name "${{vars.AZURE_BUS_SERVICE}}" --query "connectionString" --output tsv)
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "connection_send_notification_post" --value "$connection_string"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "key_secret" --value "${{ secrets.KEY_SECRET }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "sendgrid_sender_email" --value "${{ secrets.SENDGRID_SENDER_EMAIL }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "sendgrid_api_key" --value "${{ secrets.SENDGRID_API_KEY }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "smtp_sender_email" --value "${{ secrets.SMTP_SENDER_EMAIL }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "smtp_user" --value "${{ secrets.SMTP_USER }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "smtp_password" --value "${{ secrets.SMTP_PASSWORD }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "smtp_host" --value "${{ secrets.SMTP_HOST }}"
          az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "smtp_port" --value "${{ secrets.SMTP_PORT }}"
#            "az keyvault secret set --vault-name "${{vars.AZURE_KEY_VAULT}}" --name "CLIENT_ID_CODE_AUTHORIZATION" --value "${{ secrets.CLIENT_ID_CODE_AUTHORIZATION }}"

  configure-aks:
    runs-on: ubuntu-latest
    needs: configure-key-vault  # Se ejecuta después de la Azure Function
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}








      - name: Configure kubectl
        run: |
          az aks get-credentials --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" --name "${{vars.AZURE_AKS_CLUSTER}}" --overwrite-existing
          az aks update --resource-group "${{vars.AZURE_RESOURCE_GROUP}}" --name "${{vars.AZURE_AKS_CLUSTER}}" --tier free  # Configura el nivel gratuito

#      - name: Give execute permissions to deploy script
#        run: chmod +x k8s/dev/deploy-dev.sh
#
#      - name: Deploy to AKS
#        run: ./k8s/dev/deploy-dev.sh  # Ejecuta el script
#
#      - name: Deploy to AKS
#        run: |
#          kubectl apply -f k8s/dev
#          kubectl rollout status deployment/gateway-dev -n development
#          kubectl get ingress -n development  # Verifica los recursos de networking
  deploy:
    runs-on: ubuntu-latest
    needs: [configure-aks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}









      - name: Give execute permissions to deploy script
        run: chmod +x k8s/dev/deploy-dev.sh

      - name: Deploy to AKS
        run: ./k8s/dev/deploy-dev.sh  # Ejecuta el script

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/dev
          kubectl rollout status deployment/gateway-dev -n development
          kubectl get ingress -n development  # Verifica los recursos de networking
